---
description: กฎและโครงสร้างของ EpicShowdown Backend สำหรับควบคุมรูปแบบการเขียนโค้ด และการจัดการโครงสร้างโปรเจค
globs: 
alwaysApply: false
---
@Rule "Project Structure"
EpicShowdown.API/
    - Controllers/ : Handle HTTP Requests
    - Models/ : Contains DTOs[Requests,Responses], Entities, Enums, Redis Models, and Service Models
    - Services/ : Business Logic
    - Repositories/ : Data access layer
    - Data/ : Entity Framework Core's ApplicationDbContext
    - Mappings/ : AutoMapper Profiles (all profiles must be defined in a single file)
    - Infrastructure/ : Authentication and Authorization systems

@Rule "Main Files"
EpicShowdown.API/
    - Program.cs : Application entry point
    - appsettings.json : Main configuration file
    - appsettings.Development.json : Development environment configuration
    - EpicShowdown.API.csproj : Project configuration file

@Rule "System Workflow"
1. Client → Controller
2. Controller → Service
3. Service → Repository
4. Repository → Database
5. Database → Repository → Service → Controller → Client

@Rule "Technologies Used"
- .NET 8
- Entity Framework Core
- AutoMapper
- JWT Authentication
- SQL Server
- Redis

@Rule "Coding Standards"
- All names must be in English
- Class names: PascalCase (e.g., `UserService`)
- Method names: PascalCase (e.g., `GetUserProfile`)
- Variable names: camelCase (e.g., `userName`)
- Hardcoding configs is forbidden. Use IConfiguration

@Rule "Controller Guidelines"
- Controllers must be lean, no business logic inside
- Use attributes like [Authorize] appropriately
- Controllers must return `Task<IActionResult>` for all HTTP actions

@Example
```csharp
[ApiController]
[Route("api/[controller]")]
public class AuthController : ControllerBase
{
    [HttpPost("login")]
    public async Task<IActionResult> Login([FromBody] LoginRequest request)
    {
        // Handle login logic here
        return Ok();
    }
}
```

@Rule "Service Guidelines"
- One file per Service Class
- Service must not access the database directly; must go through Repository

@Rule "Repository Guidelines"
- Repository must be separated per Entity
- Always use async/await
- If a query needs more than 2-3 joins, move to View or Stored Procedure

@Rule "Field Type for Code"
- Any field named `Code` must be of type `Guid`
- `Code` fields must be required unless explicitly optional
- The `Code` field must be automatically generated by the system when creating a new record. It must not be provided by the user.

@Example
```csharp
public class ExampleEntity : Entity<int>
{
    [Required]
    public required Guid Code { get; set; }
}
```

@Rule "Entity Guidelines"
- Every Entity must inherit from `Entity<int>`
- Must reside in Namespace `EpicShowdown.API.Models.Entities`
- Entity must use `int` as Primary Key
- Do not redefine `Id`, `CreatedAt`, or `UpdatedAt` in the Entity classes, as they are already provided by `Entity<int>`

@Example
```csharp
using EpicShowdown.API.Data.Base;
namespace EpicShowdown.API.Models.Entities
{
    public class Gift : Entity<int>
    {
        [Required]
        [StringLength(100)]
        public required string Name { get; set; }

        [Required]
        public required Guid Code { get; set; }

        [StringLength(500)]
        public string? Description { get; set; }

        [Required]
        public required string ImageUrl { get; set; }

        public bool IsActive { get; set; } = true;
    }
}
```

@Rule "Redis Usage"
- Only store Sessions or Cache in Redis
- Do not use Redis as the primary database

@Rule "Error Handling"
- All Services and Repositories must handle Exceptions properly and return correct error responses to Controllers

@Example
```csharp
// Correct
public async Task<User> GetUserByIdAsync(Guid userId)
{
    var user = await _context.Users.FindAsync(userId);
    if (user == null)
    {
        throw new NotFoundException($"User {userId} not found");
    }
    return user;
}
```

@Rule "Interface and Implementations"
- Interface and its Implementation must be in the same file
- Interface name must start with `I` (e.g., `IUserService`)
- Class name must match the Interface name without the `I` prefix (e.g., `UserService`)
- Do not mix multiple Implementations in one file (unless absolutely necessary like Factory Pattern)

@Example
```csharp
// EpicShowdown.Services/IUserService.cs

public interface IUserService
{
    Task<UserDto> GetUserProfileAsync(Guid userId);
}

public class UserService : IUserService
{
    public async Task<UserDto> GetUserProfileAsync(Guid userId)
    {
        // Implementation
    }
}
```
